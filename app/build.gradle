apply plugin: 'android'

dependencies {
    compile('com.android.support:support-v4:19.0.+')
    compile('com.google.code.gson:gson:2.2.+')


    compile('com.mobclick.android:mobclick:4.6.+')
    compile('com.nostra13.universalimageloader:universal-image-loader:1.8.+')
    compile('com.nineoldandroids:library:2.4.0')
    compile('com.jakewharton:butterknife:4.0.+')
    compile('com.squareup.picasso:picasso:2.1.+')
    compile('de.keyboardsurfer.android.widget:crouton-douban:1.8.0.1')

    //compile('com.github.castorflex.smoothprogressbar:library:0.2.+')
    //compile('com.github.chrisbanes.actionbarpulltorefresh:library:0.9.+@aar')
    //compile('com.github.chrisbanes.actionbarpulltorefresh:extra-abs:0.9.+@aar')
    compile('com.actionbarsherlock:actionbarsherlock:4.4.+@aar')

    compile 'com.mcxiaoke.oauthsimple:oauthsimple:2.0.2-SNAPSHOT'

    compile project(':ptr/library')
}

android {
    compileSdkVersion 19
    buildToolsVersion "19"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            resources.srcDirs = ['src']
            jni.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }

        beta {
            signingConfig signingConfigs.release
            versionNameSuffix "-beta"
            debuggable true
        }

        debug {
            packageNameSuffix null
            versionNameSuffix "-dev" + "-b" + getDate()
        }
    }

    lintOptions {
        quiet true
        abortOnError false
    }

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}



