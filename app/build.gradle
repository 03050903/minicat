apply plugin: 'android'

dependencies {
    compile('com.android.support:support-v4:19.0.+')
    compile('com.google.code.gson:gson:2.2.+')

    compile('com.nostra13.universalimageloader:universal-image-loader:1.8.+')
    compile('com.nineoldandroids:library:2.4.0')
    compile('com.jakewharton:butterknife:4.0.+')
    compile('com.squareup.picasso:picasso:2.1.+')

    compile('com.github.castorflex.smoothprogressbar:library:0.2.+')
    compile('com.github.chrisbanes.actionbarpulltorefresh:library:0.9.+')

    compile 'com.mcxiaoke.oauthsimple:oauthsimple:2.0.+'
    compile 'com.mcxiaoke.commons:library:1.0.+'
    compile 'com.mcxiaoke.photoview:library:1.2.+'

    compile files('libs/umeng_sdk.jar')
}

loadProperties("signing.properties")

android {
    compileSdkVersion 19
    buildToolsVersion "19"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            resources.srcDirs = ['src']
        }
    }

    signingConfigs {
        release {
            storeFile file("mcxiaoke.keystore")
            storePassword project.ext.get("storePassword")
            keyAlias project.ext.get("keyAlias")
            keyPassword project.ext.get("keyPassword")
        }
    }

    buildTypes {
        release {
            zipAlign true
            signingConfig signingConfigs.release
        }

        beta {
            signingConfig signingConfigs.release
            versionNameSuffix "-beta"
            debuggable true
        }

        debug {
            packageNameSuffix null
            versionNameSuffix "-dev" + "-b" + getDate()
        }
    }

    lintOptions {
        quiet true
        abortOnError false
    }

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}


def loadProperties(String fileName) {
    def config = new Properties()
    def propFile = file(fileName)
    System.err.println("load property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            System.out.println("property " + property.key + ":" + property.value)
            project.ext[property.key] = property.value;
        }
    }
}



